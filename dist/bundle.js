(()=>{"use strict";class t{constructor(t,e){const r=o(t);this.predecessor=r.processedString,this.conditional=r.contents;const n=o(e);this.successor=n.processedString,this.attributeArithmetic=n.contents}}class e{constructor(){this.axiom="",this.string="",this.rules=[]}setAxiom(t){this.axiom=t,this.string=t}addRule(t){this.rules.push(t)}step(){let t=this.string,e=this.string;this.rules.forEach((i=>{let s=0,a=t,l=e,c=0;for(;s<a.length&&c<1e3;){c++;let e=a.substring(s).search(i.predecessor);if(-1===e)break;let h=s+e,f=i.predecessor.length,d=!0,g="",p=i.successor;if("("===a.charAt(h+i.predecessor.length)){const t=a.substring(h).search(/\)/);if(-1!==t){const e=a.substring(h,h+t+1);g=o(e).contents,f=e.length,d=n(g,i.conditional),d&&i.attributeArithmetic&&(p=i.successor+"("+r(g,i)+")")}else d=!1}if(d){const e=(u=f)<0?"":" ".repeat(u);l=l.substring(0,h+(l.length-t.length))+p+l.substring(h+(l.length-t.length)+f),a=a.substring(0,h)+e+a.substring(h+f),s=h+e.length}else s=h+f}var u;c>=1e3&&console.warn("LSystem.step: Max iterations reached for a rule, potentially infinite loop."),e=l,t=e})),this.string=e.replace(/\s+/g,"")}}function r(t,e){if(!e.attributeArithmetic)return t;let r="=",n=e.attributeArithmetic.split(r);if(n.length<2&&e.attributeArithmetic.includes("+")&&(r="+",n=e.attributeArithmetic.split(r)),n.length<2)return t;const o=n[0].trim(),i=n[1].trim(),s=t.split("=");if(s.length<2)return t;const a=s[1].trim(),l=parseFloat(a),c=parseFloat(i);if(isNaN(l)||isNaN(c))return t;let u;if("="===r)u=c;else{if("+"!==r)return t;u=l+c}return o+"="+u.toString()}function n(t,e){if(!e)return!0;const r=t.split("=");if(r.length<2)return!1;const n=r[0].trim(),o=r[1].trim();let i=">",s=e.split(i);if(s.length<2&&e.includes("=")&&(i="=",s=e.split(i)),s.length<2)return!1;const a=s[0].trim(),l=s[1].trim();if(n!==a)return!1;const c=parseFloat(o),u=parseFloat(l);return!isNaN(c)&&!isNaN(u)&&(">"===i?c>u:"="===i&&c===u)}function o(t){const e={processedString:t,contents:""},r=t.search(/\(/);if(-1!==r){const n=t.search(/\)/);n>r&&-1!==n&&(e.processedString=t.slice(0,r)+t.slice(n+1),e.contents=t.slice(r+1,n))}return e}var i,s=1e-6,a="undefined"!=typeof Float32Array?Float32Array:Array;function l(t,e,r){var n=new a(3);return n[0]=t,n[1]=e,n[2]=r,n}function c(){var t=new a(16);return a!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function u(t,e,r){var n=Math.sin(r),o=Math.cos(r),i=e[4],s=e[5],a=e[6],l=e[7],c=e[8],u=e[9],h=e[10],f=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=i*o+c*n,t[5]=s*o+u*n,t[6]=a*o+h*n,t[7]=l*o+f*n,t[8]=c*o-i*n,t[9]=u*o-s*n,t[10]=h*o-a*n,t[11]=f*o-l*n,t}function h(t,e,r){var n=Math.sin(r),o=Math.cos(r),i=e[0],s=e[1],a=e[2],l=e[3],c=e[4],u=e[5],h=e[6],f=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=i*o+c*n,t[1]=s*o+u*n,t[2]=a*o+h*n,t[3]=l*o+f*n,t[4]=c*o-i*n,t[5]=u*o-s*n,t[6]=h*o-a*n,t[7]=f*o-l*n,t}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)}),i=new a(3),a!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0);function f(t){var e=new a(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function d(t,e,r,n){var o=new a(4);return o[0]=t,o[1]=e,o[2]=r,o[3]=n,o}function g(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t}function p(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t}function m(t,e){var r=e[0],n=e[1],o=e[2],i=e[3],s=r*r+n*n+o*o+i*i;return s>0&&(s=1/Math.sqrt(s)),t[0]=r*s,t[1]=n*s,t[2]=o*s,t[3]=i*s,t}function b(t,e,r){var n=e[0],o=e[1],i=e[2],s=e[3];return t[0]=r[0]*n+r[4]*o+r[8]*i+r[12]*s,t[1]=r[1]*n+r[5]*o+r[9]*i+r[13]*s,t[2]=r[2]*n+r[6]*o+r[10]*i+r[14]*s,t[3]=r[3]*n+r[7]*o+r[11]*i+r[15]*s,t}!function(){var t=new a(4);a!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0)}();const v="attribute vec4 position;\r\n\r\nuniform mat4 projection;\r\nuniform mat4 world;\r\nuniform mat4 view;\r\n\r\nvoid main(void)\r\n{\r\n    gl_Position = projection * view * world * position;\r\n}\r\n\r\n",A="void main(void)\r\n{\r\n    gl_FragColor = vec4(1.0);\r\n}\r\n\r\n";let F=null,S=null,w=null,y=0,M=null;const L=Math.PI/180*45,x=.05;let P=.01;const R=Math.PI/180*1;let E=0;function I(){if(!F||!w)return void console.error("WebGL context or program not initialized for display.");const t=l(0,1,0),e=c();!function(t,e,r,n){var o,i,a,l,c,u,h,f,d,g,p,m,b,v,A,F,S,w,y,M,L,x,P,R,E=n[0],I=n[1],T=n[2],_=Math.hypot(E,I,T);_<s||(E*=_=1/_,I*=_,T*=_,o=Math.sin(r),a=1-(i=Math.cos(r)),l=e[0],c=e[1],u=e[2],h=e[3],f=e[4],d=e[5],g=e[6],p=e[7],m=e[8],b=e[9],v=e[10],A=e[11],F=E*E*a+i,S=I*E*a+T*o,w=T*E*a-I*o,y=E*I*a-T*o,M=I*I*a+i,L=T*I*a+E*o,x=E*T*a+I*o,P=I*T*a-E*o,R=T*T*a+i,t[0]=l*F+f*S+m*w,t[1]=c*F+d*S+b*w,t[2]=u*F+g*S+v*w,t[3]=h*F+p*S+A*w,t[4]=l*y+f*M+m*L,t[5]=c*y+d*M+b*L,t[6]=u*y+g*M+v*L,t[7]=h*y+p*M+A*L,t[8]=l*x+f*P+m*R,t[9]=c*x+d*P+b*R,t[10]=u*x+g*P+v*R,t[11]=h*x+p*P+A*R,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]))}(e,e,E,t);const r=l(0,P/2,P/.5),n=l(0,P/2,0),o=l(0,1,0),i=c();!function(t,e,r,n){var o,i,a,l,c,u,h,f,d,g,p=e[0],m=e[1],b=e[2],v=n[0],A=n[1],F=n[2],S=r[0],w=r[1],y=r[2];Math.abs(p-S)<s&&Math.abs(m-w)<s&&Math.abs(b-y)<s?function(t){t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1}(t):(h=p-S,f=m-w,d=b-y,o=A*(d*=g=1/Math.hypot(h,f,d))-F*(f*=g),i=F*(h*=g)-v*d,a=v*f-A*h,(g=Math.hypot(o,i,a))?(o*=g=1/g,i*=g,a*=g):(o=0,i=0,a=0),l=f*a-d*i,c=d*o-h*a,u=h*i-f*o,(g=Math.hypot(l,c,u))?(l*=g=1/g,c*=g,u*=g):(l=0,c=0,u=0),t[0]=o,t[1]=l,t[2]=h,t[3]=0,t[4]=i,t[5]=c,t[6]=f,t[7]=0,t[8]=a,t[9]=u,t[10]=d,t[11]=0,t[12]=-(o*p+i*m+a*b),t[13]=-(l*p+c*m+u*b),t[14]=-(h*p+f*m+d*b),t[15]=1)}(i,r,n,o);let a=T("world");a&&F.uniformMatrix4fv(a,!1,e),a=T("view"),a&&F.uniformMatrix4fv(a,!1,i),F.clear(F.COLOR_BUFFER_BIT|F.DEPTH_BUFFER_BIT),F.drawArrays(F.LINES,0,y)}function T(t){if(!F||!w)return null;const e=F.getUniformLocation(w,t);return null===e&&console.error("Could not find uniform '"+t+"'."),e}function _(){I(),E+=R}function C(t,e){if(!F)return console.error("WebGL context not available for shader initialization."),null;let r=F.createShader(e);return r?(F.shaderSource(r,t),F.compileShader(r),F.getShaderParameter(r,F.COMPILE_STATUS)?r:(console.error("An error occurred compiling the shaders: "+F.getShaderInfoLog(r)),F.deleteShader(r),null)):(console.error(`Failed to create shader object (type: ${e})`),null)}function B(){if(!F)return void console.error("WebGL context not available for reshape.");const t=document.getElementById("canvas-container");if(!t)return void console.error("Could not find canvas-container element.");const e=t.getBoundingClientRect(),r=e.width,n=e.height;console.log("Reshaping, width = "+r+", height = "+n+".");const o=r/n;console.log("Aspect ratio is "+o+".");const i=document.querySelector("canvas");if(!i)return void console.error("Could not find canvas element.");i.setAttribute("width",r.toString()),i.setAttribute("height",n.toString()),F.viewport(0,0,r,n);const s=c();!function(t,e,r,n,o){var i,s=1/Math.tan(e/2);t[0]=s/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=o&&o!==1/0?(i=1/(n-o),t[10]=(o+n)*i,t[14]=2*o*n*i):(t[10]=-1,t[14]=-2*n)}(s,45*Math.PI/180,o,.1,100);const a=T("projection");a&&F.uniformMatrix4fv(a,!1,s),I()}F=function(){const t=document.getElementById("canvas");if(!t)return alert("Could not find canvas element."),null;let e=null;const r=["webgl","experimental-webgl","webkit-3d","moz-webgl"];for(let n=0;n<r.length;n++){try{e=t.getContext(r[n])}catch(t){}if(e)return e}return e||alert("Unable to initialize WebGL. Your browser may not support it."),null}(),F?(window.onresize=B,window.onkeyup=function(t){_()},window.setInterval(_,16),F&&(F.clearColor(0,0,0,1),F.enable(F.DEPTH_TEST)),(()=>{if(!F)return void console.error("WebGL context not available for shader program initialization.");if(""===v.trim())return void console.error("Vertex shader source is not a valid string or is empty.");const t=C(v,F.VERTEX_SHADER);if(""===A.trim())return void console.error("Fragment shader source is not a valid string or is empty.");const e=C(A,F.FRAGMENT_SHADER);t&&e?(w=F.createProgram(),w?(F.attachShader(w,t),F.attachShader(w,e),F.linkProgram(w),F.getProgramParameter(w,F.LINK_STATUS)?F.useProgram(w):(console.error("Unable to initialize the shader program: "+F.getProgramInfoLog(w)),F.deleteProgram(w),w=null,F.deleteShader(t),F.deleteShader(e))):(console.error("Failed to create WebGL program."),F.deleteShader(t),F.deleteShader(e))):(console.error("Shader compilation failed. Cannot link program."),t&&F.deleteShader(t),e&&F.deleteShader(e))})(),w?(function(){M=new e,M.setAxiom("F");const r=new t("F","F[+F]F[-F]F[/F]F[*F]");M.addRule(r),console.log("Starting L-system construction..."),M.step(),M.step(),M.step(),console.log("Done.")}(),function(){if(!F||!w||!M)return void console.error("WebGL context, program, or L-System not initialized for geometry generation.");y=0;const t=[],e=[],r=[];let n=d(0,0,0,1),o=d(0,1,0,0);m(o,o),p(o,o,x);const i=c(),s=c();h(i,i,L),h(s,s,-L);const a=c(),l=c();u(a,a,L),u(l,l,-L),console.log("Starting geometry generation...");const v=M.string;for(let c=0;c<v.length;c++){const u=v.charAt(c);if("F"===u)t.push(n[0],n[1],n[2],n[3]),g(n,n,o),t.push(n[0],n[1],n[2],n[3]),n[1]>P&&(P=n[1]),y+=2;else if("+"===u)b(o,o,i),m(o,o),p(o,o,x);else if("-"===u)b(o,o,s),m(o,o),p(o,o,x);else if("*"===u)b(o,o,a),m(o,o),p(o,o,x);else if("/"===u)b(o,o,l),m(o,o),p(o,o,x);else if("["===u)e.push(f(n)),r.push(f(o));else if("]"===u){const t=e.pop();t?n=t:console.error("Position stack underflow during L-system parsing.");const i=r.pop();i?o=i:console.error("Direction stack underflow during L-system parsing.")}}console.log("Done.");const A=function(t){if(!F||!w)return-1;const e=F.getAttribLocation(w,t);return-1===e&&console.error("Could not find attribute '"+t+"'."),e}("position");-1!==A&&(S=F.createBuffer(),S?(F.bindBuffer(F.ARRAY_BUFFER,S),F.bufferData(F.ARRAY_BUFFER,new Float32Array(t),F.STATIC_DRAW),F.vertexAttribPointer(A,4,F.FLOAT,!1,0,0),F.enableVertexAttribArray(A),B()):console.error("Failed to create WebGL buffer."))}()):console.error("Shader program failed to initialize. Application cannot start.")):console.error("Failed to initialize WebGL. Application cannot start.")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,